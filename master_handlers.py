# handlers_master.py
# –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–æ–ª–∏ ¬´–ú–∞—Å—Ç–µ—Ä¬ª ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —É—Å–ª—É–≥–∏
from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from user_handlers import get_main_keyboard, get_cancel_keyboard
import db
from config import ADMIN_IDS, ACCOUNTANT_IDS, MASTER_IDS
from datetime import datetime
from aiogram import F
from states import MasterForm

router = Router()

@router.message(Command("register_master"))
async def cmd_register_master(message: types.Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.button(
        text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
        request_contact=True
    )
    # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É
    builder.adjust(1)
    kb = builder.as_markup(resize_keyboard=True)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)
    await state.set_state(MasterForm.wait_contact)


@router.message(
    StateFilter(MasterForm.wait_contact),
    F.content_type == types.ContentType.CONTACT
)
async def master_contact(message: types.Message, state: FSMContext):
    user_id = db.get_user_id_by_tg(message.from_user.id)
    db.conn.execute("UPDATE users SET phone = ? WHERE id = ?", (message.contact.phone_number, user_id))
    db.conn.commit()
    await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä.", reply_markup=get_main_keyboard(message.from_user.id))
    await state.clear()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É service_requests, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
# –ü–æ–ª—è: id, service_id, slot_id, user_id, master_id, status, amount
_cursor = db.conn.cursor()
_cursor.execute("""
    CREATE TABLE IF NOT EXISTS service_requests (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        service_id INTEGER NOT NULL,
        slot_id INTEGER NOT NULL,
        user_id INTEGER NOT NULL,
        master_id INTEGER,
        status TEXT NOT NULL DEFAULT 'new',
        amount REAL,
        FOREIGN KEY(service_id) REFERENCES services(id),
        FOREIGN KEY(slot_id) REFERENCES slots(id),
        FOREIGN KEY(user_id) REFERENCES users(id),
        FOREIGN KEY(master_id) REFERENCES users(id)
    )
""")
db.conn.commit()

# FSM –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
class CompleteRequestForm(StatesGroup):
    amount = State()  # –≤–≤–æ–¥ —Å—É–º–º—ã —É—Å–ª—É–≥–∏

# –ö–æ–º–∞–Ω–¥–∞ /master ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
@router.message(Command("master"))
async def master_menu(message: types.Message):
    tg = message.from_user.id
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –º–∞—Å—Ç–µ—Ä (–Ω–∏ –∞–¥–º–∏–Ω, –Ω–∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä, –Ω–æ –µ—Å—Ç—å –≤ –ë–î)
    if db.get_user_id_by_tg(tg) is None or tg not in MASTER_IDS:
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞.")
    builder = InlineKeyboardBuilder()
    builder.button(text="üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", callback_data="master:new")
    builder.button(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏",   callback_data="master:mine")
    builder.adjust(1)  # –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ
    await message.reply("üîß –ú–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=builder.as_markup())

# –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ (–Ω–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö)
@router.callback_query(lambda c: c.data == "master:new")
async def master_new_requests(cq: types.CallbackQuery):
    # –¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–µ–º u.username –≤–º–µ—Å—Ç–æ u.tg_id
    rows = db.conn.execute(
        """SELECT
             sr.id,
             sr.service_id,
             s.name,
             sr.slot_id,
             sl.datetime,
             u.username
           FROM service_requests sr
           JOIN services s  ON sr.service_id = s.id
           JOIN slots sl     ON sr.slot_id     = sl.id
           JOIN users u      ON sr.user_id     = u.id
           WHERE sr.status='new'"""
    ).fetchall()

    if not rows:
        await cq.message.edit_text("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    for req_id, svc_id, svc_name, slot_id, slot_dt, username in rows:
        # 1) –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
        # –µ—Å–ª–∏ slot_dt = "2025-07-20 14:30", —Ç–æ date_only = "2025-07-20"
        date_only = slot_dt.split(" ")[0]
        # –∏–ª–∏ —Ç–∞–∫:
        # date_only = datetime.strptime(slot_dt, "%Y-%m-%d %H:%M").date()

        # 2) –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ @username
        if username:
            client = f"@{username}"
        else:
            client = "–±–µ–∑ @username"

        text = (
            f"–ó–∞—è–≤–∫–∞ #{req_id}\n"
            f"–£—Å–ª—É–≥–∞: {svc_name} (ID {svc_id})\n"
            f"–î–∞—Ç–∞ —Å–ª–æ—Ç–∞: {date_only} (ID {slot_id})\n"
            f"–ö–ª–∏–µ–Ω—Ç: {client}"
        )

        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"master:accept:{req_id}")
        await cq.message.reply(text, reply_markup=builder.as_markup())

    await cq.answer()

# –ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞—è–≤–∫—É ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º status –≤ in_progress –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º master_id
@router.callback_query(lambda c: c.data and c.data.startswith("master:accept:"))
async def master_accept(cq: types.CallbackQuery):
    tg = cq.from_user.id
    master_uid = db.get_user_id_by_tg(tg)
    if not master_uid:
        return await cq.answer("–û—à–∏–±–∫–∞: –º–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.", show_alert=True)

    req_id = int(cq.data.split(":")[2])
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –µ—Å—Ç—å –∏ –Ω–æ–≤–∞—è
    row = db.conn.execute(
        "SELECT status, user_id FROM service_requests WHERE id=?", (req_id,)
    ).fetchone()
    if not row or row[0] != 'new':
        return await cq.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞.", show_alert=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
    db.conn.execute(
        "UPDATE service_requests SET status='in_progress', master_id=? WHERE id=?",
        (master_uid, req_id)
    )
    db.conn.commit()

    await cq.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.")
    await cq.message.delete()  # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏–Ω—è—Ç—å¬ª

    # –ò–∑–≤–ª–µ–∫–∞–µ–º tg_id –∫–ª–∏–µ–Ω—Ç–∞
    user_id = row[1]
    service_name = row[2]
    client_tg = db.conn.execute(
        "SELECT tg_id FROM users WHERE id=?", (user_id,)
    ).fetchone()[0]

    # –î–æ—Å—Ç–∞—ë–º —Ç–µ–ª–µ—Ñ–æ–Ω –º–∞—Å—Ç–µ—Ä–∞
    master_phone = db.conn.execute(
        "SELECT phone FROM users WHERE id=?", (master_uid,)
    ).fetchone()[0] or "–Ω–µ —É–∫–∞–∑–∞–Ω"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —Å –Ω–æ–º–µ—Ä–æ–º –º–∞—Å—Ç–µ—Ä–∞
    try:
        await cq.bot.send_message(
            client_tg,
            f"üîß –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É ¬´{service_name}¬ª –ø—Ä–∏–Ω—è—Ç–∞ –º–∞—Å—Ç–µ—Ä–æ–º. –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º.\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç –º–∞—Å—Ç–µ—Ä–∞: {master_phone}"
        )
    except:
        pass

# –°–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫ (in_progress –∏ –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö)
@router.callback_query(lambda c: c.data == "master:mine")
async def master_my_requests(cq: types.CallbackQuery):
    master_uid = db.get_user_id_by_tg(cq.from_user.id)
    rows = db.conn.execute(
        "SELECT sr.id, s.name, sl.datetime, sr.status "
        "FROM service_requests sr "
        "JOIN services s ON sr.service_id=s.id "
        "JOIN slots sl ON sr.slot_id=sl.id "
        "WHERE sr.master_id=? AND sr.status IN ('in_progress','new')",
        (master_uid,)
    ).fetchall()
    if not rows:
        await cq.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return
    for r in rows:
        req_id, svc_name, slot_dt, status = r
        text = f"#{req_id}: {svc_name} @ {slot_dt}\n–°—Ç–∞—Ç—É—Å: {status}"
        builder = InlineKeyboardBuilder()
        if status == 'in_progress':
            builder.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"master:complete:{req_id}")
        await cq.message.reply(text, reply_markup=builder.as_markup())
    await cq.answer()

# –ú–∞—Å—Ç–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞—è–≤–∫—É ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã
@router.callback_query(lambda c: c.data and c.data.startswith("master:complete:"))
async def master_complete_start(cq: types.CallbackQuery, state: FSMContext):
    req_id = int(cq.data.split(":")[2])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM
    await state.update_data(req_id=req_id)
    await state.set_state(CompleteRequestForm.amount)
    await cq.message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —É—Å–ª—É–≥–∏ (—á–∏—Å–ª–æ–º):")
    await cq.answer()

# –ü—Ä–∏ –≤–≤–æ–¥–µ —Å—É–º–º—ã ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞—è–≤–∫—É, —Å–æ–∑–¥–∞—ë–º —Å—á—ë—Ç, —É–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞
@router.message(CompleteRequestForm.amount)
async def master_complete_amount(message: types.Message, state: FSMContext):
    data = await state.get_data()
    req_id = data.get('req_id')
    try:
        amount = float(message.text.strip())
    except:
        return await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—è–≤–∫–∏
    row = db.conn.execute(
        "SELECT user_id FROM service_requests WHERE id=?", (req_id,)
    ).fetchone()
    if not row:
        await message.reply("–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return
    user_id = row[0]
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
    db.conn.execute(
        "UPDATE service_requests SET status='completed', amount=? WHERE id=?",
        (amount, req_id)
    )
    db.conn.commit()
    # –°–æ–∑–¥–∞—ë–º —Å—á—ë—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    period = datetime.now().strftime("%Y-%m")
    inv_id = db.add_invoice(user_id, amount, period)
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    client_tg = db.conn.execute("SELECT tg_id FROM users WHERE id=?", (user_id,)).fetchone()[0]
    try:
        await message.bot.send_message(client_tg,
            f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{req_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—É–º–º–∞ {amount:.2f} —Ä—É–±.\n–°—á—ë—Ç #{inv_id} –≤—ã—Å—Ç–∞–≤–ª–µ–Ω.")
    except:
        pass
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞
    for acct in ACCOUNTANT_IDS:
        try:
            await message.bot.send_message(acct,
                f"–ù–æ–≤—ã–π —Å—á—ë—Ç #{inv_id}: —É—Å–ª—É–≥–∞ –ø–æ –∑–∞—è–≤–∫–µ #{req_id}, —Å—É–º–º–∞ {amount:.2f} —Ä—É–±.")
        except:
            continue
    await message.reply(f"–ó–∞—è–≤–∫–∞ #{req_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è, —Å—á—ë—Ç #{inv_id} —Å–æ–∑–¥–∞–Ω.")
    # –õ–æ–≥–∏—Ä—É–µ–º
    master_uid = db.get_user_id_by_tg(message.from_user.id)
    db.log_action(master_uid, f"master completed request {req_id} amount={amount}")
    await state.clear()

# –º–∞—Å—Ç–µ—Ä
@router.message(F.text == "–ú–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞")
async def alias_master(message: types.Message):
    return await master_menu(message)
