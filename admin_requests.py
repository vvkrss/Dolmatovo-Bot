# admin_requests.py
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import ADMIN_IDS
import db
from user_handlers import get_main_keyboard

router = Router()

@router.message(Command("travel_requests"))
async def cmd_travel_requests(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç list[{"id","user_name","tg_id","travel_dt","car_number","purpose"}]
    requests = db.get_pending_travel_requests()
    if not requests:
        await message.reply("–ù–µ—Ç –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return

    for req in requests:
        req_id     = req["id"]
        user_name  = req["user_name"]
        travel_dt    = req["travel_dt"]
        vehicle_type = req["vehicle_type"]
        car_number   = req["car_number"]
        purpose      = req["purpose"]

        text = (
            f"–ó–∞—è–≤–∫–∞ #{req_id} –æ—Ç {user_name}:\n"
            f"üöò –¢–∏–ø: {'–ì—Ä—É–∑–æ–≤–∞—è' if vehicle_type=='cargo' else '–õ–µ–≥–∫–æ–≤–∞—è'}\n"
            f"üìÖ –î–∞—Ç–∞/–≤—Ä–µ–º—è: {travel_dt}\n"
            f"üöó –ú–∞—à–∏–Ω–∞: {car_number}\n"
            f"üéØ –¶–µ–ª—å: {purpose}"
        )

        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"travel:approve:{req_id}")
        builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",  callback_data=f"travel:reject:{req_id}")
        builder.adjust(2)  # –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥

        await message.reply(text, reply_markup=builder.as_markup())


@router.callback_query(lambda c: c.data and c.data.startswith("travel:"))
async def callback_travel_request(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    _, action, sid = callback.data.split(":")
    req_id = int(sid)
    req = db.get_travel_request(req_id)
    if not req:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    new_status = "approved" if action == "approve" else "rejected"
    db.update_travel_request_status(req_id, new_status)
    # –µ—Å–ª–∏ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –≥—Ä—É–∑–æ–≤–∞—è ‚Äî –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Å—á—ë—Ç 500 ‚ÇΩ  
    if new_status == "approved" and req["vehicle_type"] == "cargo":
        invoice_id = db.add_invoice(req["user_id"], 500, req["travel_dt"])
    # –≥–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    message_text = f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∑–¥ {('–æ–¥–æ–±—Ä–µ–Ω–∞' if new_status=='approved' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')}."
    if new_status == "approved" and req["vehicle_type"] == "cargo":
        message_text += f" –°—á—ë—Ç ‚Ññ{invoice_id} –Ω–∞ 500 ‚ÇΩ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω."

    # –ø–æ–º–µ—á–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    mark = "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞" if new_status == "approved" else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    new_text = callback.message.text + f"\n\n–°—Ç–∞—Ç—É—Å: {mark}"
    try:
        await callback.message.edit_text(new_text)
    except:
        # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç, –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        await callback.message.edit_reply_markup(reply_markup=None)

    await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω.")

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await callback.bot.send_message(
            req["tg_id"],
            message_text,
            reply_markup=get_main_keyboard(req["tg_id"])
        )
    except:
        pass


    # –ª–æ–≥–∏—Ä—É–µ–º
    admin_id = db.get_user_id_by_tg(callback.from_user.id)
    db.log_action(admin_id, f"Admin {new_status} travel_request ID={req_id}")


# alias –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é
@router.message(F.text == "–ó–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∑–¥")
async def alias_travel_requests(message: types.Message):
    return await cmd_travel_requests(message)
