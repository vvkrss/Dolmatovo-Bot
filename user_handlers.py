from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
import db
from db import get_all_services, get_available_slots, book_slot, get_user_booked_slots, cancel_slot, get_slots_by_service, add_service_request
import config
from states import BookingForm, EditRequestForm, DeleteRequestForm, TravelRequestForm, MasterForm
from config import ADMIN_IDS, ACCOUNTANT_IDS, MASTER_IDS
import calendar


user_router = Router()

# FSM —Ñ–æ—Ä–º—ã
class OfferForm(StatesGroup):
    text = State()

class TravelForm(StatesGroup):
    date = State()
    car_number = State()
    cargo = State()

class TravelRequestForm(StatesGroup):
    vehicle_type = State()
    date_time = State()    # –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏
    car_number = State()   # –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã
    purpose = State()      # —Ü–µ–ª—å –ø–æ–µ–∑–¥–∫–∏

@user_router.message(F.text == "–û—Ç–º–µ–Ω–∞", StateFilter("*"))
async def alias_cancel(message: types.Message, state: FSMContext):
    return await cmd_cancel(message, state)

def get_cancel_keyboard() -> ReplyKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π ¬´/cancel¬ª.
    """
    builder = ReplyKeyboardBuilder()
    builder.button(text="–û—Ç–º–µ–Ω–∞")
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

def get_main_keyboard(tg_id: int) -> ReplyKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏,
    —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ä–æ–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è tg_id.
    """
    builder = ReplyKeyboardBuilder()

    # ‚Äî –û–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö ‚Äî
    if (tg_id not in config.MASTER_IDS and tg_id not in config.ACCOUNTANT_IDS) or (tg_id in config.ADMIN_IDS):
        builder.button(text="–ù–æ–≤–æ—Å—Ç–∏")                   # /news
        builder.button(text="–°–æ–±—ã—Ç–∏—è")                   # /events
        builder.button(text="–£—Å–ª—É–≥–∏")                    # /services
        builder.button(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É")      # /book_service
        builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É")      # /edit_service_requests
        builder.button(text="–£–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É")       # /delete_service_requests
        builder.button(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∑–¥")          # /request_travel
        # builder.button(text="–û—Ç–º–µ–Ω–∞")                    # /cancel

    # ‚Äî –ê–¥–º–∏–Ω ‚Äî
    if tg_id in config.ADMIN_IDS:
        builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")      # /add_news
        builder.button(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å") # /edit_news
        builder.button(text="–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")       # /delete_news

        builder.button(text="–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ")       # /create_event
        builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")      # /create_event
        builder.button(text="–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")       # /create_event

        builder.button(text="–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É")      # /add_service
        builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É")      # /edit_service
        builder.button(text="–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É")       # /delete_service

        builder.button(text="–°–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç")         # /create_slot
        builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ—Ç")        # /edit_slot
        builder.button(text="–£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç")         # /delete_slot

        builder.button(text="–ó–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∑–¥")     # /travel_requests

    # ‚Äî –ë—É—Ö–≥–∞–ª—Ç–µ—Ä ‚Äî
    if tg_id in config.ACCOUNTANT_IDS:
        builder.button(text="–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞")           # /pending_invoices
        builder.button(text="–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∑–Ω–æ—Å—ã")         # /import_contributions
        builder.button(text="–°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç")                # /generate_contributions
        builder.button(text="–ù–∞–ø–æ–º–Ω–∏—Ç—å –¥–æ–ª–∂–Ω–∏–∫–∞–º")          # /send_reminders
        builder.button(text="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∑–Ω–æ—Å—ã")         # /export_contributions
        builder.button(text="–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ —Å–æ–±—ã—Ç–∏—è—Ö")         # /send_event_reminders
        builder.button(text="–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –≤–∏–∑–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞")   # /send_service_reminders

    # ‚Äî –ú–∞—Å—Ç–µ—Ä ‚Äî
    if tg_id in config.MASTER_IDS:
        builder.button(text="–ú–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞")                 # /master

    # —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

# /start
@user_router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user = message.from_user
    kb = get_main_keyboard(user.id)
    db.add_user(
        user.id,
        f"{user.first_name} {user.last_name or ''}".strip(),
        user.last_name or "",
        user.username or ""
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –î–æ–ª–º–∞—Ç–æ–≤–æ! –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.", reply_markup=kb)
    await state.clear()

    # –µ—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Ç–µ—Ä –∏ —É –Ω–µ–≥–æ –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Ç–µ–ª–µ—Ñ–æ–Ω ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
    if user.id in MASTER_IDS:
        user_id = db.get_user_id_by_tg(user.id)
        row = db.conn.execute(
            "SELECT phone FROM users WHERE id = ?", (user_id,)
        ).fetchone()
        # –µ—Å–ª–∏ —Å—Ç–æ–ª–±—Ü–∞ phone –Ω–µ—Ç –∏–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π/NULL ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
        if not row or not row[0]:
            builder = ReplyKeyboardBuilder()
            builder.button(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
            builder.adjust(1)
            await message.answer(
                "–ü–æ—Ö–æ–∂–µ, –≤—ã –º–∞—Å—Ç–µ—Ä.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                reply_markup=builder.as_markup(resize_keyboard=True)
            )
            await state.set_state(MasterForm.wait_contact)


# /cancel
@user_router.message(Command("cancel"), StateFilter("*"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    if await state.get_state() is None:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.", reply_markup=get_main_keyboard(message.from_user.id))
    else:
        await state.clear()
        await message.reply("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard(message.from_user.id))



# /help
@user_router.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    # –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã

    if (message.from_user.id not in config.MASTER_IDS and message.from_user.id not in config.ACCOUNTANT_IDS) or (message.from_user.id in config.ADMIN_IDS):
        help_text += "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        help_text += "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        help_text += "/news - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–Ω–æ–≤–æ—Å—Ç–∏)\n"
        help_text += "/events - —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
        help_text += "/services - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥\n"
        help_text += "/book_service - –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É\n"
        help_text += "/request_travel - –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–µ–∑–¥\n"
        help_text += "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    # print(message.from_user.id)
    if message.from_user.id in ADMIN_IDS:
        help_text += "\n–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        help_text += "/add_news - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å\n"
        help_text += "/edit_news - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å\n"
        help_text += "/add_event - —Å–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n"
        help_text += "/add_service - –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É\n"
        help_text += "/edit_service - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —É—Å–ª—É–≥—É\n"
        help_text += "/delete_service - —É–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É\n"
        help_text += "/create_slot - —Å–æ–∑–¥–∞—Ç—å —Ç–∞–π–º-—Å–ª–æ—Ç —É—Å–ª—É–≥–∏\n"
        help_text += "/travel_requests - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∑–¥\n"
    if message.from_user.id in ACCOUNTANT_IDS:
        help_text += "\n–ö–æ–º–∞–Ω–¥—ã –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞:\n"
        help_text += "/pending_invoices ‚Äî —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤\n"
        help_text += "/import_contributions ‚Äî –∏–º–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –≤–∑–Ω–æ—Å–æ–≤ –∏–∑ CSV\n"
        help_text += "/generate_contributions ‚Äî —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        help_text += "/export_contributions ‚Äî —ç–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≤–∑–Ω–æ—Å–æ–≤ –≤ CSV\n"
        help_text += "/send_reminders ‚Äî —Ä–∞–∑–æ—Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∏–∫–∞–º\n"
        help_text += "/send_event_reminders ‚Äî —Ä–∞–∑–æ—Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö —Å–µ–≥–æ–¥–Ω—è\n"
        help_text += "/send_service_reminders ‚Äî —Ä–∞–∑–æ—Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∏–∑–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –∑–∞–≤—Ç—Ä–∞\n"
        help_text += "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
    if message.from_user.id in MASTER_IDS:
        help_text += "\n–ö–æ–º–∞–Ω–¥—ã –º–∞—Å—Ç–µ—Ä–∞:\n"
        help_text += "/master - –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–∞\n"
    await message.answer(text=help_text)

# /news
@user_router.message(Command("news"))
async def cmd_news(message: types.Message):
    all_news = db.get_all_news()
    if not all_news:
        await message.answer("–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.")
        return
    pinned = [n for n in all_news if n["pinned"]]
    regular = [n for n in all_news if not n["pinned"]]

    lines = []
    for news in pinned:
        lines.append(f"üìå <b>{news['id']}: {news['title']} ({news['date']})</b>\n{news['text']}\n")
    for news in regular:
        lines.append(f"{news['id']}: <b>{news['title']} ({news['date']})</b>\n{news['text']}\n")
    await message.answer("\n".join(lines), parse_mode="HTML", reply_markup=get_main_keyboard(message.from_user.id))


# /events
@user_router.message(Command("events"))
async def cmd_events(message: types.Message):
    upcoming = db.get_upcoming_events()
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M")
    db.cursor.execute("SELECT id, title, description, datetime, location FROM events WHERE datetime < ? ORDER BY datetime DESC", (now_str,))
    past_rows = db.cursor.fetchall()
    past = [{"id": r[0], "title": r[1], "description": r[2], "datetime": r[3], "location": r[4]} for r in past_rows]

    if not upcoming and not past:
        await message.answer("–°–æ–±—ã—Ç–∏–π –Ω–µ—Ç.")
        return

    lines = []
    if upcoming:
        lines.append("üéâ <b>–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è:</b>")
        for ev in upcoming:
            lines.append(f"{ev['id']}: {ev['title']}\n    –î–∞—Ç–∞: {ev['datetime']}\n    –ß—Ç–æ –±—É–¥–µ—Ç?: {ev['description']}\n    –ì–¥–µ?: {ev['location']}")
    if past:
        lines.append("\nüïì <b>–ü—Ä–æ—à–µ–¥—à–∏–µ —Å–æ–±—ã—Ç–∏—è:</b>")
        for ev in past:
            lines.append(f"{ev['id']}: {ev['title']}\n    –î–∞—Ç–∞: {ev['datetime']}\n    –ß—Ç–æ –±—É–¥–µ—Ç?: {ev['description']}\n    –ì–¥–µ?: {ev['location']}")
    await message.answer("\n".join(lines), parse_mode="HTML", reply_markup=get_main_keyboard(message.from_user.id))

# /services
@user_router.message(Command("services"))
async def admin_list_services(message: types.Message):
    """
    –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤).
    """
    services = db.get_all_services()
    if not services:
        return await message.reply("–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ –ø—É—Å—Ç.")
    text_lines = ["üìã –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:"]
    for svc in services:
        text_lines.append(f"{svc['id']}: {svc['name']} ({svc.get("price")} ‚ÇΩ)")
    await message.reply("\n".join(text_lines), reply_markup=get_main_keyboard(message.from_user.id))

#1) /add_service ‚Äî –∑–∞–∫–∞–∑ —É—Å–ª—É–≥–∏ (–∞–Ω–∞–ª–æ–≥ /book, –Ω–æ —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –≤ service_requests)
@user_router.message(Command("book_service"))
async def cmd_add_service(message: types.Message, state: FSMContext):
    services = db.get_all_services()
    if not services:
        return await message.reply("‚ùå –£—Å–ª—É–≥ –Ω–µ—Ç.")

    await message.answer(
        "–í—ã –≤ —Ä–µ–∂–∏–º–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É. –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.",
        reply_markup=get_cancel_keyboard()
    )

    builder = InlineKeyboardBuilder()
    for svc in services:
        builder.button(
            text=f"{svc['name']} ({svc['price']}¬†‚ÇΩ)",
            callback_data=f"ord:svc:{svc['id']}"
        )
    # one button per row:
    builder.adjust(1)
    kb = builder.as_markup()
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:\n"
    await message.reply(text + "\n", reply_markup=kb)
    await state.set_state(BookingForm.service)

# @user_router.callback_query(
#     lambda c: c.data and c.data.startswith("ord:svc:"),
#     StateFilter(BookingForm.service)
# )
# async def add_service_choose(cq: types.CallbackQuery, state: FSMContext):
#     svc_id = int(cq.data.split(":", 2)[2])
#     svc   = db.get_service(svc_id)
#     if not svc:
#         await cq.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
#         return
#
#     await state.update_data(service_id=svc_id, service_name=svc["name"])
#     slots = get_slots_by_service(svc_id)
#     if not slots:
#         await state.clear()
#         await cq.message.edit_text("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.")
#         await cq.message.answer(
#             "–ß–µ–º –µ—â—ë –º–æ–≥—É –ø–æ–º–æ—á—å?",
#             reply_markup=get_main_keyboard(cq.from_user.id)
#         )
#         await cq.answer()
#         return
#
#     builder = InlineKeyboardBuilder()
#     for sl in slots:
#         builder.button(
#             text=sl["datetime"],
#             callback_data=f"ord:slot:{sl['id']}"
#         )
#     builder.adjust(1)
#     kb = builder.as_markup()
#
#     await state.set_state(BookingForm.slot)
#     await cq.message.edit_text(f"–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è ¬´{svc['name']}¬ª:",
#                                reply_markup=kb)
#     await cq.answer()

@user_router.callback_query(
    lambda c: c.data and c.data.startswith("ord:svc:"),
    StateFilter(BookingForm.service)
)
async def add_service_choose(cq: types.CallbackQuery, state: FSMContext):
    svc_id = int(cq.data.split(":", 2)[2])
    svc    = db.get_service(svc_id)
    if not svc:
        await cq.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –∏ –∏–º—è
    await state.update_data(service_id=svc_id, service_name=svc["name"])

    # –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≥–æ–¥ (—Ç–µ–∫—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π)
    this_year = datetime.now().year
    years = [this_year, this_year + 1]
    builder = InlineKeyboardBuilder()
    for y in years:
        builder.button(text=str(y), callback_data=f"book:year:{y}")
    builder.adjust(2)
    await cq.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:", reply_markup=builder.as_markup())
    await state.set_state(BookingForm.date_year)
    await cq.answer()

# –≤—ã–±–æ—Ä –≥–æ–¥–∞

@user_router.callback_query(
    lambda c: c.data and c.data.startswith("book:year:"),
    StateFilter(BookingForm.date_year)
)
async def choose_year(cq: types.CallbackQuery, state: FSMContext):
    year = int(cq.data.split(":", 2)[2])
    await state.update_data(year=year)

    # –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü
    builder = InlineKeyboardBuilder()
    for m in range(1, 13):
        builder.button(text=str(m), callback_data=f"book:month:{m}")
    builder.adjust(4)
    await cq.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=builder.as_markup())
    await state.set_state(BookingForm.date_month)
    await cq.answer()

# –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞

@user_router.callback_query(
    lambda c: c.data and c.data.startswith("book:month:"),
    StateFilter(BookingForm.date_month)
)
async def choose_month(cq: types.CallbackQuery, state: FSMContext):
    month = int(cq.data.split(":", 2)[2])
    data = await state.get_data()
    year = data["year"]
    await state.update_data(month=month)

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –¥–Ω–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –µ—Å—Ç—å –≤–æ–æ–±—â–µ,
    # –Ω–æ –ø–æ–∫–∞–∑–∞–≤–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –¥–∞—Ç—ã, –≥–¥–µ –µ—Å—Ç—å —Å–ª–æ—Ç—ã
    svc_id = data["service_id"]
    all_slots = get_slots_by_service(svc_id)
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —Å–ª–æ—Ç—ã
    days_with = {
        int(s["datetime"][8:10])
        for s in all_slots
        if int(s["datetime"][:4]) == year and int(s["datetime"][5:7]) == month
    }
    if not days_with:
        await cq.answer("–ù–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.", show_alert=True)
        return

    builder = InlineKeyboardBuilder()
    for day in sorted(days_with):
        builder.button(text=str(day), callback_data=f"book:day:{day}")
    builder.adjust(6)
    await cq.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:", reply_markup=builder.as_markup())
    await state.set_state(BookingForm.date_day)
    await cq.answer()

# –≤—ã–±–æ—Ä –¥–Ω—è

# @user_router.callback_query(
#     lambda c: c.data and c.data.startswith("book:day:"),
#     StateFilter(BookingForm.date_day)
# )
# async def choose_day(cq: types.CallbackQuery, state: FSMContext):
#     day = int(cq.data.split(":", 2)[2])
#     data = await state.get_data()
#     year = data["year"]
#     month = data["month"]
#     svc_id = data["service_id"]
#     svc_name = data["service_name"]
#
#     # —Å–æ–±–∏—Ä–∞–µ–º —Å–ª–æ—Ç—ã —Å—Ç—Ä–æ–≥–æ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
#     date_prefix = f"{year:04d}-{month:02d}-{day:02d}"
#     all_slots = get_slots_by_service(svc_id)
#     day_slots = [s for s in all_slots if s["datetime"].startswith(date_prefix)]
#     if not day_slots:
#         await cq.answer("–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.", show_alert=True)
#         return
#
#     builder = InlineKeyboardBuilder()
#     for sl in day_slots:
#         # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–µ—Ñ–∏–∫—Å ord:slot:
#         builder.button(text=sl["datetime"][11:16], callback_data=f"ord:slot:{sl['id']}")
#     builder.adjust(3)
#     await cq.message.edit_text(f"–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è ¬´{svc_name}¬ª –Ω–∞ {date_prefix}:", reply_markup=builder.as_markup())
#     await state.set_state(BookingForm.slot)
#     await cq.answer()


@user_router.callback_query(
    lambda c: c.data and c.data.startswith("book:day:"),
    StateFilter(BookingForm.date_day)
)
async def choose_day(cq: types.CallbackQuery, state: FSMContext):
    data     = await state.get_data()
    year     = data["year"]
    month    = data["month"]
    svc_id   = data["service_id"]
    svc_name = data["service_name"]
    day      = int(cq.data.split(":", 2)[2])
    date_prefix = f"{year:04d}-{month:02d}-{day:02d}"

    all_slots = get_slots_by_service(svc_id)
    day_slots = [s for s in all_slots if s["datetime"].startswith(date_prefix)]
    if not day_slots:
        await cq.answer("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.", show_alert=True)
        return

    # –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Å–ª–æ—Ç
    slot_id = day_slots[0]["id"]
    tg_id   = cq.from_user.id
    user_id = db.get_user_id_by_tg(tg_id) or db.add_user(
        tg_id,
        f"{cq.from_user.first_name} {cq.from_user.last_name or ''}".strip(),
        cq.from_user.last_name or "",
        cq.from_user.username or ""
    )

    # —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –∏ —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É
    book_slot(slot_id, user_id)
    req_id = db.add_service_request(svc_id, slot_id, user_id)

    # –®–∞–≥¬†1: –º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—É–±–∏—Ä–∞–µ–º inline‚Äë–∫–Ω–æ–ø–∫–∏)
    await cq.message.edit_text(
        f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —É—Å–ª—É–≥—É ¬´{svc_name}¬ª –Ω–∞ {date_prefix}.\n"
        f"–≠—Ç–æ –≤–∞—à –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏ (–∑–∞—è–≤–∫–∞¬†#{req_id})."
    )

    # –®–∞–≥¬†2: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Reply‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await cq.message.answer(
        "–ß–µ–º –µ—â—ë –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=get_main_keyboard(tg_id)
    )

    db.log_action(user_id, f"User —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É #{req_id} –Ω–∞ —É—Å–ª—É–≥—É ID={svc_id}")
    await state.clear()
    await cq.answer()


# 2) /edit_service ‚Äî –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–ª–æ—Ç –¥–ª—è –ù–ï –≤–∑—è—Ç–æ–π –º–∞—Å—Ç–µ—Ä–æ–º –∑–∞—è–≤–∫–∏
@user_router.message(Command("edit_service_requests"))
async def cmd_edit_service(message: types.Message, state: FSMContext):
    user_id = db.get_user_id_by_tg(message.from_user.id)
    reqs = db.get_user_service_requests(user_id, statuses=["new"])
    if not reqs:
        return await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.")
    text = "–í–∞—à–∏ –Ω–µ–∑–∞–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏:\n" + "\n".join(
        f"{r['id']}: {r['service_name']} @{r['slot_datetime']}" for r in reqs
    )
    await message.reply(text + "\n\n–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=get_cancel_keyboard())
    await state.set_state(EditRequestForm.request_id)

@user_router.message(EditRequestForm.request_id)
async def edit_service_select(message: types.Message, state: FSMContext):
    try:
        req_id = int(message.text.strip())
    except:
        return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏.")
    req = db.get_service_request(req_id)
    if not req or req["status"] != "new" or req["user_id"] != db.get_user_id_by_tg(message.from_user.id):
        return await message.reply("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –µ—ë –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å.")
    await state.update_data(request_id=req_id, service_id=req["service_id"])
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ—Ç—ã –ø–æ —Ç–æ–π –∂–µ —É—Å–ª—É–≥–µ
    slots = db.get_available_slots(req["service_id"])
    if not slots:
        await state.clear()
        return await message.reply("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.")
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ª–æ—Ç:\n" + "\n".join(f"{sl['id']}: {sl['datetime']}" for sl in slots)
    await message.reply(text + "\n", reply_markup=get_cancel_keyboard())
    await state.set_state(EditRequestForm.new_slot)  # -> new_slot

@user_router.message(EditRequestForm.new_slot)
async def edit_service_slot(message: types.Message, state: FSMContext):
    data = await state.get_data()
    req_id = data["request_id"]
    new_slot_id = int(message.text.strip())
    req = db.get_service_request(req_id)
    old_slot_id = req["slot_id"]
    user_id = req["user_id"]
    # –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å–ª–æ—Ç, —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
    db.book_slot(new_slot_id, user_id)
    cursor = db.conn.cursor()
    cursor.execute("UPDATE slots SET booked_by = NULL WHERE id = ?", (old_slot_id,))
    db.conn.commit()
    # –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
    db.conn.execute("UPDATE service_requests SET slot_id = ? WHERE id = ?", (new_slot_id, req_id))
    db.conn.commit()
    await message.reply(f"‚úÖ –ó–∞—è–≤–∫–∞ #{req_id} –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ —Å–ª–æ—Ç {new_slot_id}.", reply_markup=get_main_keyboard(message.from_user.id))
    db.log_action(user_id, f"User –∏–∑–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É #{req_id} –Ω–∞ —Å–ª–æ—Ç {new_slot_id}")
    await state.clear()

# 3) /delete_service ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –ù–ï –≤–∑—è—Ç—É—é –º–∞—Å—Ç–µ—Ä–æ–º –∑–∞—è–≤–∫—É
@user_router.message(Command("delete_service_requests"))
async def cmd_delete_service(message: types.Message, state: FSMContext):
    user_id = db.get_user_id_by_tg(message.from_user.id)
    reqs = db.get_user_service_requests(user_id, statuses=["new"])
    if not reqs:
        return await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    text = "–í–∞—à–∏ –Ω–µ–∑–∞–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏:\n" + "\n".join(
        f"{r['id']}: {r['service_name']} @{r['slot_datetime']}" for r in reqs
    )
    await message.reply(text + "\n\n–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=get_cancel_keyboard())
    await state.set_state(DeleteRequestForm.request_id)

@user_router.message(DeleteRequestForm.request_id)
async def delete_service_req(message: types.Message, state: FSMContext):
    req_id = int(message.text.strip())
    req = db.get_service_request(req_id)
    if not req or req["status"] != "new" or req["user_id"] != db.get_user_id_by_tg(message.from_user.id):
        return await message.reply("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –µ—ë –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.")
    # –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç –∏ –ø–æ–º–µ—á–∞–µ–º –∑–∞—è–≤–∫—É
    cursor = db.conn.cursor()
    cursor.execute("UPDATE slots SET booked_by = NULL WHERE id = ?", (req["slot_id"],))
    cursor.execute("UPDATE service_requests SET status = 'canceled' WHERE id = ?", (req_id,))
    db.conn.commit()
    await message.reply(f"‚ùå –ó–∞—è–≤–∫–∞ #{req_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard(message.from_user.id))
    db.log_action(req["user_id"], f"User –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É #{req_id}")
    await state.clear()

# /book ‚Äî –ø–æ–∫–∞ –∑–∞–≥–æ—Ç–æ–≤–∫–∞
# @user_router.message(Command("book"), StateFilter("*"))
# async def cmd_order_service_start(message: types.Message, state: FSMContext):
#     svcs = get_all_services()
#     kb   = types.InlineKeyboardMarkup(
#         inline_keyboard=[
#             [ types.InlineKeyboardButton(
#                   s["name"],
#                   callback_data=f"ord:svc:{s['id']}"
#               )
#             ] for s in svcs
#         ]
#     )
#     await state.set_state(BookingForm.service)
#     await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=kb)
#
# @user_router.callback_query(lambda c: c.data and c.data.startswith("ord:svc:"), StateFilter(BookingForm.service))
# async def cmd_order_service_service_chosen(cq: types.CallbackQuery, state: FSMContext):
#     svc_id = int(cq.data.split(":")[2])
#     slots  = get_available_slots(svc_id)
#     if not slots:
#         return await cq.answer("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.", show_alert=True)
#     builder = InlineKeyboardBuilder()
#     for sl in slots:
#         builder.button(
#             text=sl["datetime"],
#             callback_data=f"ord:slot:{sl['id']}"
#         )
#     # –†–∞–∑–º–µ—Å—Ç–∏–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ
#     builder.adjust(1)
#     kb = builder.as_markup()
#     await state.update_data(service_id=svc_id)
#     await state.set_state(BookingForm.slot)
#     await cq.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç:", reply_markup=kb)
#     await cq.answer()
#
# @user_router.callback_query(lambda c: c.data and c.data.startswith("ord:slot:"), StateFilter(BookingForm.slot))
# async def cmd_order_service_slot_chosen(cq: types.CallbackQuery, state: FSMContext):
#     slot_id = int(cq.data.split(":")[2])
#     user_id = db.get_user_id_by_tg(cq.from_user.id)
#     book_slot(slot_id, user_id)
#     await cq.message.edit_text(f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–ª–æ—Ç ID {slot_id}.", reply_markup=get_main_keyboard(cq.from_user.id))
#     await cq.answer()
#     await state.clear()

@user_router.message(Command("cancel_order"), StateFilter("*"))
async def cmd_cancel_order_start(message: types.Message, state: FSMContext):
    user_id = db.get_user_id_by_tg(message.from_user.id)
    slots   = get_user_booked_slots(user_id)
    if not slots:
        return await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
    builder = InlineKeyboardBuilder()
    for sl in slots:
        builder.button(
            text=f"{sl['id']} ‚Äî {sl['datetime']}",
            callback_data=f"cad:slot:{sl['id']}"
        )
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ
    builder.adjust(1)
    kb = builder.as_markup()
    await state.set_state(BookingForm.slot)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=kb)

@user_router.callback_query(lambda c: c.data and c.data.startswith("cad:slot:"), StateFilter(BookingForm.slot))
async def cmd_cancel_order_slot_chosen(cq: types.CallbackQuery):
    slot_id = int(cq.data.split(":")[2])
    cancel_slot(slot_id)
    await cq.message.edit_text(f"‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–ª–æ—Ç ID {slot_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard(cq.from_user.id))
    await cq.answer()

# /request_travel
# @user_router.message(Command("request_travel"))
# async def cmd_request_travel(message: types.Message, state: FSMContext):
#     await state.set_state(TravelRequestForm.description)
#     await message.reply("–í–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∑–¥:\n(–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–∞—Ç–∞, –º–∞—à–∏–Ω–∞, —Ü–µ–ª—å)")
#
# @user_router.message(TravelRequestForm.description)
# async def travel_description_entered(message: types.Message, state: FSMContext):
#     description = message.text.strip()
#     user_id = db.get_user_id_by_tg(message.from_user.id)
#     req_id = db.add_travel_request(user_id, description)
#     db.log_action(user_id, f"User –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–µ–∑–¥ ID={req_id}")
#     await message.reply("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", reply_markup=get_main_keyboard(message.from_user.id))
#     await state.clear()

@user_router.message(Command("request_travel"))
async def cmd_request_travel(message: types.Message, state: FSMContext):
    # –®–∞–≥ 1: –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –º–∞—à–∏–Ω—ã
    kb = InlineKeyboardBuilder()
    kb.button(text="üöó –õ–µ–≥–∫–æ–≤–∞—è", callback_data="travel:type:passenger")
    kb.button(text="üöö –ì—Ä—É–∑–æ–≤–∞—è",  callback_data="travel:type:cargo")
    kb.adjust(1)
    await message.answer("üöò –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—à–∏–Ω—ã –¥–ª—è –ø–æ–µ–∑–¥–∫–∏:", reply_markup=kb.as_markup())
    await state.set_state(TravelRequestForm.vehicle_type)

@user_router.callback_query(lambda c: c.data and c.data.startswith("travel:type:"),
                            StateFilter(TravelRequestForm.vehicle_type))
async def callback_travel_type(cq: types.CallbackQuery, state: FSMContext):
    vtype = cq.data.split(":", 2)[2]  # "passenger" –∏–ª–∏ "cargo"
    await state.update_data(vehicle_type=vtype)
    await cq.answer()
    # –®–∞–≥ 2: –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏
    await cq.message.edit_reply_markup()
    # –ø—Ä–æ—Å–∏–º –¥–∞—Ç—É/–≤—Ä–µ–º—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await cq.message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(TravelRequestForm.date_time)

# 2) –ó–∞–ø–æ–º–Ω–∏–ª–∏ –¥–∞—Ç—É/–≤—Ä–µ–º—è ‚Äî –ø—Ä–æ—Å–∏–º –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã
@user_router.message(TravelRequestForm.date_time)
async def travel_date_time_entered(message: types.Message, state: FSMContext):
    dt_text = message.text.strip()
    # —Ç—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —á–µ—Ä–µ–∑ datetime.strptime
    await state.update_data(date_time=dt_text)
    await message.answer(
        "üöó –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(TravelRequestForm.car_number)

# 3) –ó–∞–ø–æ–º–Ω–∏–ª–∏ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã ‚Äî –ø—Ä–æ—Å–∏–º —Ü–µ–ª—å
@user_router.message(TravelRequestForm.car_number)
async def travel_car_entered(message: types.Message, state: FSMContext):
    car = message.text.strip()
    await state.update_data(car_number=car)
    await message.answer(
        "üéØ –ù–∞–∫–æ–Ω–µ—Ü, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –ø–æ–µ–∑–¥–∫–∏:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(TravelRequestForm.purpose)

# 4) –°–æ–±—Ä–∞–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É, —Å—á—ë—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
@user_router.message(TravelRequestForm.purpose)
async def travel_purpose_entered(message: types.Message, state: FSMContext):
    data       = await state.get_data()
    vtype      = data["vehicle_type"]
    date_time  = data["date_time"]
    car_number = data["car_number"]
    purpose    = message.text.strip()

    tg_id  = message.from_user.id
    user_id = db.get_user_id_by_tg(tg_id)
    if user_id is None:
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ—Ç –≤ –ë–î, —Å–æ–∑–¥–∞—ë–º
        fullnm = f"{message.from_user.first_name} {message.from_user.last_name or ''}".strip()
        user_id = db.add_user(tg_id, fullnm, message.from_user.last_name or "", message.from_user.username or "")


    # a) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞ –º–∞—à–∏–Ω—ã)
    req_id = db.add_travel_request(user_id, date_time, vtype, car_number, purpose)

    # b) —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(
        f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{req_id} –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=get_main_keyboard(tg_id)
    )

    # d) —à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    text_admin = (
        f"üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∑–¥ ‚Ññ{req_id} –æ—Ç {message.from_user.full_name}:\n"
        f"‚Ä¢ –¢–∏–ø: {'–ì—Ä—É–∑–æ–≤–∞—è' if vtype=='cargo' else '–õ–µ–≥–∫–æ–≤–∞—è'}\n"
        f"‚Ä¢ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {date_time}\n"
        f"‚Ä¢ –ú–∞—à–∏–Ω–∞: {car_number}\n"
        f"‚Ä¢ –¶–µ–ª—å: {purpose}"
    )
    for admin in config.ADMIN_IDS:
        try:
            await message.bot.send_message(admin, text_admin)
        except:
            pass

    await state.clear()


# –æ–±—â–∏–µ
@user_router.message(F.text == "–ù–æ–≤–æ—Å—Ç–∏")
async def alias_news(message: types.Message):
    return await cmd_news(message)

@user_router.message(F.text == "–°–æ–±—ã—Ç–∏—è")
async def alias_events(message: types.Message):
    return await cmd_events(message)

@user_router.message(F.text == "–£—Å–ª—É–≥–∏")
async def alias_services(message: types.Message):
    return await admin_list_services(message)



@user_router.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É")
async def alias_book(message: types.Message, state: FSMContext):
    return await cmd_add_service(message, state)

@user_router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É")
async def alias_book(message: types.Message, state: FSMContext):
    return await cmd_edit_service(message, state)

@user_router.message(F.text == "–£–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É")
async def alias_book(message: types.Message, state: FSMContext):
    return await cmd_delete_service(message, state)



@user_router.message(F.text == "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∑–¥")
async def alias_travel(message: types.Message, state: FSMContext):
    return await cmd_request_travel(message, state)


