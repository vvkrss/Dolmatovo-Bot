from aiogram import Router, types, F
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, StateFilter
from datetime import datetime
#from states import NewsForm
import config
import db
from db import add_news, get_all_news, get_news, update_news
from user_handlers import get_main_keyboard

# Router for news and events management (admin only)
admin_router = Router()
admin_router.message.filter(lambda msg: msg.from_user and msg.from_user.id in config.ADMIN_IDS)
admin_router.callback_query.filter(lambda cq: cq.from_user and cq.from_user.id in config.ADMIN_IDS)

class AddNewsForm(StatesGroup):
    title = State()
    text = State()
    date = State()
    pin = State()

class EditNewsForm(StatesGroup):
    id = State()
    title = State()
    text = State()
    date = State()
    pin = State()



class EventForm(StatesGroup):
    """FSM-—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è (–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)."""
    title = State()       # –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
    desc = State()        # –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    datetime = State()    # –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è
    place = State()       # –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è

class EditEventForm(StatesGroup):
    """FSM-—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è."""
    event_id = State()    # –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    title = State()       # –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∏–ª–∏ 0, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    desc = State()        # –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ 0, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    datetime = State()    # –Ω–æ–≤–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è (–∏–ª–∏ 0, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    place = State()       # –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (–∏–ª–∏ 0, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

class DeleteNewsState(StatesGroup):
    waiting_id = State()
    confirm = State()

class DeleteEventState(StatesGroup):
    waiting_id = State()
    confirm = State()

#=============================================================================================================================================
#                                                       /add_news
#=============================================================================================================================================
@admin_router.message(Command("add_news"))
async def cmd_add_news(message: types.Message, state: FSMContext):
    await state.set_state(AddNewsForm.title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏:")

@admin_router.message(AddNewsForm.title)
async def add_news_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await state.set_state(AddNewsForm.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:")

@admin_router.message(AddNewsForm.text)
async def add_news_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text.strip())
    await state.set_state(AddNewsForm.date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0 –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π:")

@admin_router.message(AddNewsForm.date)
async def add_news_date(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "0":
        date_str = datetime.now().strftime(config.DATE_FORMAT)
    else:
        try:
            date_str = datetime.strptime(text, config.DATE_FORMAT).strftime(config.DATE_FORMAT)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
            return
    await state.update_data(date=date_str)
    await state.set_state(AddNewsForm.pin)
    await message.answer("–ó–∞–∫—Ä–µ–ø–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å? (–¥–∞/–Ω–µ—Ç):")

@admin_router.message(AddNewsForm.pin)
async def add_news_pin(message: types.Message, state: FSMContext):
    pinned = message.text.strip().lower() == "–¥–∞"
    data = await state.get_data()
    news_id = db.add_news(data["title"], data["text"], data["date"], pinned)
    await message.answer(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID {news_id}).", reply_markup=get_main_keyboard(message.from_user.id))
    await state.clear()


#=============================================================================================================================================
#                                                       /edit_news
#=============================================================================================================================================

@admin_router.message(Command("edit_news"))
async def cmd_edit_news(message: types.Message, state: FSMContext):
    news_list = db.get_all_news()
    if not news_list:
        await message.answer("–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    text = "–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:\n" + "\n".join(f"{n['id']}: {n['title']} ({n['date']})" for n in news_list)
    await state.set_state(EditNewsForm.id)
    await message.answer(f"{text}\n\n–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")

@admin_router.message(EditNewsForm.id)
async def edit_news_id(message: types.Message, state: FSMContext):
    if not message.text.strip().isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID:")
        return
    news_id = int(message.text.strip())
    news = db.get_news(news_id)
    if not news:
        await message.answer("–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(id=news_id, old=news)
    await state.set_state(EditNewsForm.title)
    await message.answer(f"–¢–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {news['title']}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ 0, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:")

@admin_router.message(EditNewsForm.title)
async def edit_news_title(message: types.Message, state: FSMContext):
    data = await state.get_data()
    title = data["old"]["title"] if message.text.strip() == "0" else message.text.strip()
    await state.update_data(title=title)
    await state.set_state(EditNewsForm.text)
    await message.answer(f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: {data['old']['text']}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ 0:")

@admin_router.message(EditNewsForm.text)
async def edit_news_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text = data["old"]["text"] if message.text.strip() == "0" else message.text.strip()
    await state.update_data(text=text)
    await state.set_state(EditNewsForm.date)
    await message.answer(f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {data['old']['date']}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î) –∏–ª–∏ 0:")

@admin_router.message(EditNewsForm.date)
async def edit_news_date(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if message.text.strip() == "0":
        date_str = data["old"]["date"]
    else:
        try:
            date_str = datetime.strptime(message.text.strip(), config.DATE_FORMAT).strftime(config.DATE_FORMAT)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ 0:")
            return
    await state.update_data(date=date_str)
    await state.set_state(EditNewsForm.pin)
    status = "–¥–∞" if data["old"]["pinned"] else "–Ω–µ—Ç"
    await message.answer(f"–ù–æ–≤–æ—Å—Ç—å —Å–µ–π—á–∞—Å {'–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞' if data['old']['pinned'] else '–Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞'}. –ó–∞–∫—Ä–µ–ø–∏—Ç—å? (–¥–∞ / –Ω–µ—Ç / 0):")

@admin_router.message(EditNewsForm.pin)
async def edit_news_pin(message: types.Message, state: FSMContext):
    data = await state.get_data()
    txt = message.text.strip().lower()
    if txt == "0":
        pinned = data["old"]["pinned"]
    elif txt in ["–¥–∞", "yes", "1"]:
        pinned = True
    elif txt in ["–Ω–µ—Ç", "no", "false"]:
        pinned = False
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ '–¥–∞', '–Ω–µ—Ç' –∏–ª–∏ '0':")
        return
    db.update_news(
        data["id"],
        data["title"],
        data["text"],
        data["date"],
        pinned
    )
    await message.answer(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å ID {data['id']} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=get_main_keyboard(message.from_user.id))
    await state.clear()

@admin_router.message(Command("list_news"))
async def cmd_list_news(message: types.Message):
    news_list = db.get_all_news()
    if not news_list:
        await message.answer("–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—É—Å—Ç.")
        return
    text = "\n".join(f"{n['id']}: {n['title']} ({n['date']}){' [PIN]' if n['pinned'] else ''}" for n in news_list)
    await message.answer("üì∞ –ù–æ–≤–æ—Å—Ç–∏:\n" + text, reply_markup=get_main_keyboard(message.from_user.id))


#==========================================================================================================================================
#                                                       /delete_news
#==========================================================================================================================================

@admin_router.message(Command("delete_news"))
async def cmd_delete_news(message: types.Message, state: FSMContext):
    news_list = db.get_all_news()
    if not news_list:
        await message.answer("–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—É—Å—Ç.")
        return

    lines = ["üóû <b>–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:</b>"]
    for n in news_list:
        lines.append(f"{n['id']}: {n['title']} ({n['date']})")
    lines.append("\n–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await message.answer("\n".join(lines), parse_mode="HTML")
    await state.set_state(DeleteNewsState.waiting_id)

@admin_router.message(DeleteNewsState.waiting_id)
async def process_delete_news_id(message: types.Message, state: FSMContext):
    try:
        news_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")
        return

    news = db.get_news(news_id)
    if not news:
        await message.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    await state.update_data(news_id=news_id)
    await state.set_state(DeleteNewsState.confirm)
    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å #{news_id} '{news['title']}'? (–¥–∞/–Ω–µ—Ç)")

@admin_router.message(DeleteNewsState.confirm)
async def process_delete_news_confirm(message: types.Message, state: FSMContext):
    text = message.text.strip().lower()
    if text != "–¥–∞":
        await message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return

    data = await state.get_data()
    news_id = data.get("news_id")
    db.delete_news(news_id)
    await message.answer(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å #{news_id} —É–¥–∞–ª–µ–Ω–∞.", reply_markup=get_main_keyboard(message.from_user.id))
    admin_id = db.get_user_id_by_tg(message.from_user.id)
    db.log_action(admin_id, f"Admin —É–¥–∞–ª–∏–ª –Ω–æ–≤–æ—Å—Ç—å ID={news_id}")
    await state.clear()


#==========================================================================================================================================
#                                                       /add_event
#==========================================================================================================================================


@admin_router.message(Command("add_event"))
async def cmd_add_event(message: types.Message, state: FSMContext):
    """–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: –Ω–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è. –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(EventForm.title)  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞

@admin_router.message(EventForm.title)
async def process_event_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
    await state.update_data(title=message.text.strip())  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(EventForm.desc)  # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ

@admin_router.message(EventForm.desc)
async def process_event_desc(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
    await state.update_data(desc=message.text.strip())  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:")
    await state.set_state(EventForm.datetime)  # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è

@admin_router.message(EventForm.datetime)
async def process_event_datetime(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
    date_text = message.text.strip()
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        event_dt = datetime.strptime(date_text, config.DATETIME_FORMAT)
    except ValueError:
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:")
        return  # –æ—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥—è –¥–∞–ª—å—à–µ
    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç datetime –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(event_dt=event_dt)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(EventForm.place)  # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è

@admin_router.message(EventForm.place)
async def process_event_place(message: types.Message, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: –ø–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –ë–î."""
    place = message.text.strip()
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç—É/–≤—Ä–µ–º—è)
    data = await state.get_data()
    title = data.get("title")
    desc = data.get("desc")
    event_dt = data.get("event_dt")  # —ç—Ç–æ –æ–±—ä–µ–∫—Ç datetime
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É/–≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫—É –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    datetime_str = event_dt.strftime(config.DATETIME_FORMAT) if event_dt else None
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
    event_id = db.add_event(title, desc, datetime_str, place)
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, –∑–∞–≤–µ—Ä—à–∞—è –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await state.clear()
    # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    import logging
    logging.info(f"Admin {message.from_user.id} added event {event_id}")
    await message.answer(f"‚úÖ –°–æ–±—ã—Ç–∏–µ #{event_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ.", reply_markup=get_main_keyboard(message.from_user.id))  # —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    # (–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏)

@admin_router.message(Command("edit_event"))
async def cmd_edit_event(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º ID."""
    upcoming = db.get_upcoming_events()
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M")
    db.cursor.execute("SELECT id, title, datetime FROM events WHERE datetime < ? ORDER BY datetime DESC", (now_str,))
    past_rows = db.cursor.fetchall()
    past = [{"id": r[0], "title": r[1], "datetime": r[2]} for r in past_rows]

    if not upcoming and not past:
        await message.answer("–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø—É—Å—Ç.")
        return

    lines = ["üìã <b>–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å ID:</b>"]
    for ev in upcoming:
        lines.append(f"{ev['id']}: {ev['title']} ({ev['datetime']})")
    for ev in past:
        lines.append(f"{ev['id']}: {ev['title']} ({ev['datetime']})")

    lines.append("\n–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
    await message.answer("\n".join(lines), parse_mode="HTML")
    await state.set_state(EditEventForm.event_id)


@admin_router.message(EditEventForm.event_id)
async def process_edit_event_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    text = message.text.strip()
    if not text.isdigit():
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ, –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ ID
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —Å–æ–±—ã—Ç–∏—è:")
        return
    event_id = int(text)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º ID –≤ –±–∞–∑–µ
    event_record = db.get_event(event_id)
    if event_record is None:
        await message.answer("‚ùå –°–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        await state.clear()
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–±—ã—Ç–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —à–∞–≥–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    await state.update_data(event_id=event_id)
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (0 - –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    current_title = event_record["title"]
    await message.answer(f"–¢–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {current_title}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–±—ã—Ç–∏—è (–≤–≤–µ–¥–∏—Ç–µ 0, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π):")
    await state.set_state(EditEventForm.title)

@admin_router.message(EditEventForm.title)
async def process_edit_event_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫) –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."""
    title_text = message.text.strip()
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –≤–≤–µ–ª "0", –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    if title_text == "0":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º None, —á—Ç–æ–±—ã –¥–∞–ª–µ–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        await state.update_data(new_title=None)
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ –∞–¥–º–∏–Ω –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±–µ–ª –æ—Ç–ø—Ä–∞–≤–∏–ª)
        await state.update_data(new_title=title_text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–≤–≤–µ–¥–∏—Ç–µ 0, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π):")
    await state.set_state(EditEventForm.desc)

@admin_router.message(EditEventForm.desc)
async def process_edit_event_desc(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫) –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."""
    desc_text = message.text.strip()
    if desc_text == "0":
        await state.update_data(new_desc=None)  # 0 –æ–∑–Ω–∞—á–∞–µ—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    else:
        await state.update_data(new_desc=desc_text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM (–≤–≤–µ–¥–∏—Ç–µ 0, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π):")
    await state.set_state(EditEventForm.datetime)

@admin_router.message(EditEventForm.datetime)
async def process_edit_event_datetime(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è (–∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫) –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."""
    date_text = message.text.strip()
    new_dt = None
    if date_text == "0" or date_text == "":
        # –ï—Å–ª–∏ "0" –∏–ª–∏ –ø—É—Å—Ç–æ - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–∞—Ç—É/–≤—Ä–µ–º—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (new_dt –æ—Å—Ç–∞–µ—Ç—Å—è None)
        new_dt = None
    else:
        try:
            # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è
            new_dt = datetime.strptime(date_text, config.DATETIME_FORMAT)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É/–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM (–∏–ª–∏ 0 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
            return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ (–æ–±—ä–µ–∫—Ç datetime –∏–ª–∏ None) –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(new_dt=new_dt)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è (–≤–≤–µ–¥–∏—Ç–µ 0, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π):")
    await state.set_state(EditEventForm.place)

@admin_router.message(EditEventForm.place)
async def process_edit_event_place(message: types.Message, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    place_text = message.text.strip()
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    data = await state.get_data()
    event_id = data.get("event_id")
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –ë–î (—á—Ç–æ–±—ã –∑–Ω–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    event = db.get_event(event_id)
    if event is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ.")
        await state.clear()
        return
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ, –µ—Å–ª–∏ –≤–≤–µ–ª–∏ 0 (None)
    new_title = data.get("new_title")
    new_desc = data.get("new_desc")
    new_dt_obj = data.get("new_dt")  # –º–æ–∂–µ—Ç –±—ã—Ç—å datetime –∏–ª–∏ None
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è —Å—Ç–∞—Ä—ã–µ, –µ—Å–ª–∏ –Ω–æ–≤—ã–µ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
    updated_title = new_title if new_title not in (None, "") else event["title"]
    updated_desc = new_desc if new_desc not in (None, "") else event["description"]
    if new_dt_obj is not None:
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        updated_dt_str = new_dt_obj.strftime(config.DATETIME_FORMAT)
    else:
        updated_dt_str = event["datetime"]  # –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏)
    updated_place = place_text if place_text not in ("", "0") else event["location"]
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ–±—ã—Ç–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    # (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è update_event —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ db.py –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å update_news)
    db.cursor.execute("UPDATE events SET title = ?, description = ?, datetime = ?, location = ? WHERE id = ?",
                      (updated_title, updated_desc, updated_dt_str, updated_place, event_id))
    db.conn.commit()
    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM-—Å–µ—Å—Å–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.clear()
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    import logging
    logging.info(f"Admin {message.from_user.id} edited event {event_id}")
    await message.answer(f"‚úÖ –°–æ–±—ã—Ç–∏–µ #{event_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=get_main_keyboard(message.from_user.id))

@admin_router.message(Command("list_events"))
async def cmd_list_events(message: types.Message):
    """–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ."""
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è (—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∏ –±—É–¥—É—â–∏–µ) –∏–∑ –±–∞–∑—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    upcoming_events = db.get_upcoming_events()  # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å–æ–±—ã—Ç–∏–π —Å datetime >= —Å–µ–π—á–∞—Å
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ —Å–æ–±—ã—Ç–∏—è (–¥–∞—Ç–∞ < —Å–µ–π—á–∞—Å), –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ —É–±—ã–≤–∞–Ω–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ—à–µ–¥—à–∏–µ —Å–≤–µ—Ä—Ö—É)
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M")
    db.cursor.execute("SELECT id, title, datetime, location FROM events WHERE datetime < ? ORDER BY datetime DESC", (now_str,))
    past_rows = db.cursor.fetchall()
    past_events = [{"id": r[0], "title": r[1], "datetime": r[2], "location": r[3]} for r in past_rows]
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
    if not upcoming_events and not past_events:
        await message.answer("–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç.")
        return
    lines = ["üìÖ <b>–°–æ–±—ã—Ç–∏—è</b>:"]
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ (–±–ª–∏–∂–∞–π—à–∏–µ) —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–≤—ã–º –±–ª–æ–∫–æ–º
    if upcoming_events:
        lines.append("‚û°Ô∏è <i>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</i>")
        for ev in upcoming_events:
            ev_date = ev["datetime"]  # —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM
            ev_title = ev["title"]
            ev_location = ev["location"]
            lines.append(f"{ev['id']}. {ev_title} ‚Äî {ev_date} @ {ev_location}")
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ —Å–æ–±—ã—Ç–∏—è —Å–ª–µ–¥—É—é—â–∏–º –±–ª–æ–∫–æ–º
    if past_events:
        lines.append("\n‚úÖ <i>–ü—Ä–æ—à–µ–¥—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</i>")
        for ev in past_events:
            ev_date = ev["datetime"]
            ev_title = ev["title"]
            ev_location = ev["location"]
            lines.append(f"{ev['id']}. {ev_title} ‚Äî {ev_date} @ {ev_location}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
    await message.answer("\n".join(lines), parse_mode="HTML", reply_markup=get_main_keyboard(message.from_user.id))

#===============================================================================================================================================
#                                                               /delete_event
#===============================================================================================================================================

@admin_router.message(Command("delete_event"))
async def cmd_delete_event(message: types.Message, state: FSMContext):
    upcoming = db.get_upcoming_events()
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M")
    db.cursor.execute("SELECT id, title, datetime FROM events WHERE datetime < ? ORDER BY datetime DESC", (now_str,))
    past_rows = db.cursor.fetchall()
    past = [{"id": r[0], "title": r[1], "datetime": r[2]} for r in past_rows]

    if not upcoming and not past:
        await message.answer("–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø—É—Å—Ç.")
        return

    lines = ["üìÖ <b>–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:</b>"]
    for ev in upcoming:
        lines.append(f"{ev['id']}: {ev['title']} ({ev['datetime']})")
    for ev in past:
        lines.append(f"{ev['id']}: {ev['title']} ({ev['datetime']})")

    lines.append("\n–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await message.answer("\n".join(lines), parse_mode="HTML")
    await state.set_state(DeleteEventState.waiting_id)


@admin_router.message(DeleteEventState.waiting_id)
async def process_delete_event_id(message: types.Message, state: FSMContext):
    try:
        event_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")
        return

    event = db.get_event(event_id)
    if not event:
        await message.answer("‚ùå –°–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return

    await state.update_data(event_id=event_id)
    await state.set_state(DeleteEventState.confirm)
    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ #{event_id} '{event['title']}'? (–¥–∞/–Ω–µ—Ç)")

@admin_router.message(DeleteEventState.confirm)
async def process_delete_event_confirm(message: types.Message, state: FSMContext):
    text = message.text.strip().lower()
    if text != "–¥–∞":
        await message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return

    data = await state.get_data()
    event_id = data.get("event_id")
    db.delete_event(event_id)
    await message.answer(f"‚úÖ –°–æ–±—ã—Ç–∏–µ #{event_id} —É–¥–∞–ª–µ–Ω–æ.", reply_markup=get_main_keyboard(message.from_user.id))
    admin_id = db.get_user_id_by_tg(message.from_user.id)
    db.log_action(admin_id, f"Admin —É–¥–∞–ª–∏–ª —Å–æ–±—ã—Ç–∏–µ ID={event_id}")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel (–æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏) –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
from aiogram.filters import StateFilter

@admin_router.message(Command("cancel"), StateFilter("*"))
async def cancel_action(message: types.Message, state: FSMContext):
    current = await state.get_state()
    if current is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
    else:
        await state.clear()
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard(message.from_user.id))


def register_news_event_handlers(dp: Dispatcher):
    dp.include_router(admin_router)

# –∞–¥–º–∏–Ω
@admin_router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
async def alias_add_news(message: types.Message, state: FSMContext):
    return await cmd_add_news(message, state)

@admin_router.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
async def alias_edit_news(message: types.Message, state: FSMContext):
    return await cmd_edit_news(message, state)

@admin_router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
async def alias_delete_news(message: types.Message, state: FSMContext):
    return await cmd_delete_news(message, state)

# @admin_router.message(F.text == "–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π")
# async def alias_list_news(message: types.Message, state: FSMContext):
#     return await cmd_list_news(message, state)



@admin_router.message(F.text == "–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ")
async def alias_create_event(message: types.Message, state: FSMContext):
    return await cmd_add_event(message, state)

@admin_router.message(F.text == "–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
async def alias_delete_event(message: types.Message, state: FSMContext):
    return await cmd_delete_event(message, state)

@admin_router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
async def alias_edit_event(message: types.Message, state: FSMContext):
    return await cmd_edit_event(message, state)

# @admin_router.message(F.text == "–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π")
# async def alias_list_event(message: types.Message, state: FSMContext):
#     return await cmd_list_events(message, state)



@admin_router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def alias_cancel(message: types.Message, state: FSMContext):
    return await cancel_action(message, state)
