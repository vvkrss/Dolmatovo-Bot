# handlers_accountant.py
from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
import csv
import io
from datetime import datetime, date, timedelta
from user_handlers import get_main_keyboard, get_cancel_keyboard

import config
import db

accountant_router = Router()
# –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–ø–∏—Å–∫—É –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–≤
accountant_router.message.filter(lambda msg: msg.from_user and msg.from_user.id in config.ACCOUNTANT_IDS)
accountant_router.callback_query.filter(lambda cq: cq.from_user and cq.from_user.id in config.ACCOUNTANT_IDS)


class ImportCSVForm(StatesGroup):
    waiting_file = State()

class CreateInvoiceForm(StatesGroup):
    user   = State()  # –∂–¥–µ–º @username –∏–ª–∏ Telegram‚ÄëID
    amount = State()  # –∂–¥–µ–º —Å—É–º–º—É


# ---------- 1) /pending_invoices -------------
@accountant_router.message(Command("pending_invoices"))
async def cmd_pending_invoices(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–û–ø–ª–∞—á–µ–Ω–æ'.
    """
    invoices = db.get_unpaid_invoices()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç list[{"id","amount","period","user_name","tg_id"}] :contentReference[oaicite:0]{index=0}
    if not invoices:
        return await message.answer("–ù–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤.")
    text_lines = ["üìÑ *–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –≤–∑–Ω–æ—Å—ã:*"]
    for idx, inv in enumerate(invoices, start=1):
        text_lines.append(
            f"{idx}. {inv['user_name']}: {inv['amount']} —Ä—É–±. –∑–∞ {inv['period']}"
        )

    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —á–µ—Ä–µ–∑ Builder
    builder = InlineKeyboardBuilder()
    for inv in invoices:
        builder.button(
            text="–û–ø–ª–∞—á–µ–Ω–æ",
            callback_data=f"pay_inv:{inv['id']}"
        )
    builder.adjust(1)  # –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ
    kb = builder.as_markup()
    await message.answer("\n".join(text_lines), reply_markup=kb)


# ----- Callback –ø–æ –Ω–∞–∂–∞—Ç–∏—é '–û–ø–ª–∞—á–µ–Ω–æ' -----
@accountant_router.callback_query(lambda cq: cq.data and cq.data.startswith("pay_inv:"))
async def callback_mark_paid(callback: types.CallbackQuery):
    inv_id = int(callback.data.split(":", 1)[1])
    db.mark_invoice_paid(inv_id)  # –ø–æ–º–µ—á–∞–µ—Ç –≤ –ë–î :contentReference[oaicite:1]{index=1}
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    acct_id = db.get_user_id_by_tg(callback.from_user.id)
    db.log_action(acct_id, f"Accountant marked invoice ID={inv_id} as paid")
    await callback.answer("‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–æ.")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    await callback.message.edit_text(
        text="–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",
        reply_markup=None
    )
    # –ü–µ—Ä–µ—Ä–∏—Å—É–µ–º /pending_invoices
    await cmd_pending_invoices(callback.message)


# ---------- 2) /import_contributions -------------
@accountant_router.message(Command("import_contributions"))
async def cmd_import_contributions(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç CSV-—Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: tg_id,amount
    """
    await message.answer("üìÇ –ü—Ä–∏—à–ª–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–∑–Ω–æ—Å–æ–≤ (tg_id,amount) –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞.")
    await state.set_state(ImportCSVForm.waiting_file)

@accountant_router.message(ImportCSVForm.waiting_file)
async def process_csv_file(message: types.Message, state: FSMContext):
    if not message.document:
        return await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.")
    bio = io.BytesIO()
    await message.bot.download(message.document, destination=bio)
    bio.seek(0)
    reader = csv.reader(io.TextIOWrapper(bio, encoding='utf-8'))
    period = date.today().strftime("%Y-%m")
    added = 0
    for row in reader:
        if not row or len(row) < 1:
            continue
        try:
            tg_id = int(row[0])
            amount = float(row[1]) if len(row) > 1 else config.DEFAULT_CONTRIBUTION_AMOUNT
        except:
            continue
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î
        user_id = db.get_user_id_by_tg(tg_id)
        if user_id is None:
            # –¥–æ–±–∞–≤–∏–º –±–µ–∑ –∏–º–µ–Ω–∏
            user_id = db.add_user(tg_id, "", "", "", is_admin=0, is_accountant=1)
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—á—ë—Ç
        db.add_invoice(user_id, amount, period)  # :contentReference[oaicite:2]{index=2}
        added += 1
    await state.clear()
    await message.answer(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {added}.")


# ---------- 3) /generate_contributions -------------
@accountant_router.message(Command("generate_contributions"), StateFilter("*"))
async def cmd_generate_contribution_start(message: types.Message, state: FSMContext):
    await message.answer(
        "üßæ –í–≤–µ–¥–∏—Ç–µ Telegram‚ÄëID –∏–ª–∏ username (–±–µ–∑ @) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(CreateInvoiceForm.user)

@accountant_router.message(StateFilter(CreateInvoiceForm.user))
async def cmd_generate_contribution_user(message: types.Message, state: FSMContext):
    text = message.text.strip()
    # –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ username
    row = db.cursor.execute(
        "SELECT id, tg_id, first_name, last_name FROM users WHERE username = ?",
        (text.lstrip("@"),)
    ).fetchone()
    if row:
        user_id, tg_id, fn, ln = row
        user_name = f"{fn} {ln}".strip()
    else:
        # –µ—Å–ª–∏ –Ω–µ –ø–æ username, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ —Å–∞–º–æ–º—É —á–∏—Å–ª—É tg_id
        try:
            tg_id = int(text)
            user_id = db.get_user_id_by_tg(tg_id)
            if user_id is None:
                raise ValueError
            row2 = db.cursor.execute(
                "SELECT first_name, last_name FROM users WHERE tg_id = ?",
                (tg_id,)
            ).fetchone()
            user_name = f"{row2[0]} {row2[1]}".strip()
        except:
            return await message.reply(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username (–±–µ–∑ @) –∏–ª–∏ Telegram‚ÄëID.",
                reply_markup=get_cancel_keyboard()
            )

    await state.update_data(user_id=user_id, tg_id=tg_id, user_name=user_name)
    await message.answer(
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user_name}</b> (tg_id: <code>{tg_id}</code>)\n"
        "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—á—ë—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500 –∏–ª–∏ 1250.50):",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(CreateInvoiceForm.amount)

@accountant_router.message(StateFilter(CreateInvoiceForm.amount))
async def cmd_generate_contribution_amount(message: types.Message, state: FSMContext):
    txt = message.text.strip().replace(",", ".")
    try:
        amount = float(txt)
    except:
        return await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 500 –∏–ª–∏ 1250.50.",
            reply_markup=get_cancel_keyboard()
        )

    data = await state.get_data()
    user_id   = data["user_id"]
    tg_id     = data["tg_id"]
    user_name = data["user_name"]
    period    = date.today().strftime("%Y-%m")

    invoice_id = db.add_invoice(user_id, amount, period)

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞
    await message.answer(
        f"‚úÖ –°—á—ë—Ç ‚Ññ<b>{invoice_id}</b> –Ω–∞ —Å—É–º–º—É <b>{amount:.2f} ‚ÇΩ</b> —Å–æ–∑–¥–∞–Ω –¥–ª—è "
        f"<b>{user_name}</b> (tg_id: <code>{tg_id}</code>) –∑–∞ –ø–µ—Ä–∏–æ–¥ <code>{period}</code>.",
        parse_mode="HTML",
        reply_markup=get_main_keyboard(message.from_user.id)
    )

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.bot.send_message(
            tg_id,
            f"–í–∞–º –≤—ã—Å—Ç–∞–≤–ª–µ–Ω —Å—á—ë—Ç ‚Ññ{invoice_id} –Ω–∞ —Å—É–º–º—É {amount:.2f} ‚ÇΩ –∑–∞ –ø–µ—Ä–∏–æ–¥ {period}.",
            reply_markup=get_main_keyboard(tg_id)
        )
    except:
        pass

    # –ª–æ–≥
    admin_id = db.get_user_id_by_tg(message.from_user.id)
    db.log_action(admin_id, f"–°–æ–∑–¥–∞–Ω —Å—á—ë—Ç #{invoice_id} ({amount:.2f} ‚ÇΩ) –¥–ª—è user_id={user_id}")

    await state.clear()


# ---------- 4) /send_reminders -------------
@accountant_router.message(Command("send_reminders"))
async def cmd_send_reminders(message: types.Message):
    """
    –†–∞—Å—Å—ã–ª–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∏–∫–∞–º.
    """
    invoices = db.get_unpaid_invoices()  # :contentReference[oaicite:3]{index=3}
    debts = {}
    for inv in invoices:
        debts.setdefault(inv['tg_id'], 0.0)
        debts[inv['tg_id']] += inv['amount']
    sent = 0
    for tg_id, total in debts.items():
        try:
            await message.bot.send_message(tg_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤–∞—à–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å {total:.2f} —Ä—É–±.")
            sent += 1
        except:
            continue
    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}.")


# ---------- 5) /send_event_reminders -------------
@accountant_router.message(Command("send_event_reminders"))
async def cmd_send_event_reminders(message: types.Message):
    """
    –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö —Å–µ–≥–æ–¥–Ω—è.
    """
    today_str = datetime.now().strftime("%Y-%m-%d")
    events = db.get_upcoming_events()  # :contentReference[oaicite:4]{index=4}
    todays = [ev for ev in events if ev['datetime'].startswith(today_str)]
    if not todays:
        return await message.answer("–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
    lines = [f"üìÖ –°–µ–≥–æ–¥–Ω—è:"]
    for ev in todays:
        time = ev['datetime'][11:16]
        lines.append(f"‚Äì {ev['title']} –≤ {time}, {ev['location']}")
    text = "\n".join(lines)
    # –®–ª—ë–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    db.cursor.execute("SELECT tg_id FROM users")
    tgs = [r[0] for r in db.cursor.fetchall()]
    sent = 0
    for tg in tgs:
        try:
            await message.bot.send_message(tg, text)
            sent += 1
        except:
            continue
    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö: {sent}.")


# ---------- 6) /send_service_reminders -------------
@accountant_router.message(Command("send_service_reminders"))
async def cmd_send_service_reminders(message: types.Message):
    """
    –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∏–∑–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –∑–∞–≤—Ç—Ä–∞.
    """
    tomorrow_str = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
    # –ë–µ—Ä—ë–º –≤—Å–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    db.cursor.execute("""
        SELECT sl.datetime, sl.booked_by, s.name
        FROM slots sl
        JOIN services s ON sl.service_id = s.id
        WHERE sl.booked_by IS NOT NULL
          AND substr(sl.datetime,1,10)=?
    """, (tomorrow_str,))
    rows = db.cursor.fetchall()  # [(datetime, user_id, service_name), ...]
    sent = 0
    for dt_str, user_id, svc_name in rows:
        time = dt_str[11:16]
        # –ü–æ–ª—É—á–∞–µ–º tg_id
        db.cursor.execute("SELECT tg_id FROM users WHERE id = ?", (user_id,))
        tg = db.cursor.fetchone()
        if not tg:
            continue
        tg_id = tg[0]
        try:
            await message.bot.send_message(
                tg_id,
                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ –∫ –≤–∞–º –ø—Ä–∏–¥—ë—Ç {svc_name} –≤ {time}."
            )
            sent += 1
        except:
            continue
    await message.answer(f"‚úÖ –°–µ—Ä–≤–∏—Å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {sent}.")


# ---------- 7) /export_contributions -------------
@accountant_router.message(Command("export_contributions"))
async def cmd_export_contributions(message: types.Message):
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–∫–∞—á–∞—Ç—å CSV –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤.
    """
    # –ö–Ω–æ–ø–∫–∞ —á–µ—Ä–µ–∑ Builder
    builder = InlineKeyboardBuilder()
    builder.button(text="üì• –°–∫–∞—á–∞—Ç—å CSV", callback_data="export_csv")
    builder.adjust(1)
    kb = builder.as_markup()

    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å CSV —Å–æ –≤—Å–µ–º–∏ –≤–∑–Ω–æ—Å–∞–º–∏:",
        reply_markup=kb
    )


@accountant_router.callback_query(lambda cq: cq.data == "export_csv")
async def callback_export_contributions(callback: types.CallbackQuery):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç CSV —Å–æ –≤—Å–µ–º–∏ —Å—á–µ—Ç–∞–º–∏,
    –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å.
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
    output = io.StringIO()
    output.write("\ufeff")
    writer = csv.writer(output, delimiter=';')  # <-- —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ';'
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    writer.writerow(["invoice_id", "tg_id", "user_name", "amount", "period", "status"])
    # –î–∞–Ω–Ω—ã–µ
    db.cursor.execute("""
        SELECT inv.id, u.tg_id, u.first_name, u.last_name, inv.amount, inv.period, inv.status
        FROM invoices inv
        JOIN users u ON inv.user_id = u.id
        ORDER BY inv.id
    """)
    for inv_id, tg_id, fn, ln, amt, per, status in db.cursor.fetchall():
        name = fn or ""
        if ln:
            name += " " + ln
        writer.writerow([inv_id, tg_id, name.strip(), amt, per, status])
    output.seek(0)

    # –°—á–∏—Ç—ã–≤–∞–µ–º –±–∞–π—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    csv_bytes = output.getvalue().encode("utf-8")
    file = BufferedInputFile(csv_bytes, filename="all_invoices.csv")

    await callback.message.bot.send_document(
        chat_id=callback.from_user.id,
        document=file,
        caption="‚úÖ –í—Å–µ —Å—á–µ—Ç–∞ –≤ CSV (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ‚Äî —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π)"
    )
    await callback.answer()


# ---------- 8) /cancel -------------
@accountant_router.message(Command("cancel"))
async def cancel_accountant(message: types.Message, state: FSMContext):
    if await state.get_state() is None:
        return await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.")
    await state.clear()
    await message.answer("‚úñÔ∏è –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# –±—É—Ö–≥–∞–ª—Ç–µ—Ä
@accountant_router.message(F.text == "–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞")
async def alias_pending_invoices(message: types.Message):
    return await cmd_pending_invoices(message)

@accountant_router.message(F.text == "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∑–Ω–æ—Å—ã")
async def alias_import_contrib(message: types.Message, state: FSMContext):
    return await cmd_import_contributions(message, state)

@accountant_router.message(F.text == "–°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç")
async def alias_generate_contrib(message: types.Message, state: FSMContext):
    return await cmd_generate_contribution_start(message, state)

@accountant_router.message(F.text == "–ù–∞–ø–æ–º–Ω–∏—Ç—å –¥–æ–ª–∂–Ω–∏–∫–∞–º")
async def alias_send_reminders(message: types.Message):
    return await cmd_send_reminders(message)

@accountant_router.message(F.text == "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∑–Ω–æ—Å—ã")
async def alias_export_contrib(message: types.Message):
    return await cmd_export_contributions(message)

@accountant_router.message(F.text == "–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ —Å–æ–±—ã—Ç–∏—è—Ö")
async def alias_send_event_reminders(message: types.Message):
    return await cmd_send_event_reminders(message)

@accountant_router.message(F.text == "–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –≤–∏–∑–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞")
async def alias_send_service_reminders(message: types.Message):
    return await cmd_send_service_reminders(message)
